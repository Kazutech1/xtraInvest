generator client {
  provider = "prisma-client-js"
}




datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  fullName         String
  username         String      @unique
  email            String      @unique
  phoneNumber      String
  password         String
  referralCode     String      @unique
  totalBalance     Float       @default(0)
  totalProfit      Float       @default(0)
  referralBalance  Float       @default(0)
  profileImage     String?
  isActive         Boolean     @default(true)
  currentPlan      String?     @db.ObjectId
  planStartDate    DateTime?
  deposits         Deposit[]
  withdrawals      Withdrawal[]
  referredBy       Referral[]  @relation("Referrer")
  referredUsers    Referral[]  @relation("Referee")
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model Referral {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  referrer        User?    @relation("Referrer", fields: [referrerId], references: [id]) // Made optional with ?
  referrerId      String?  @db.ObjectId // Made optional with ?
  referee         User?     @relation("Referee", fields: [refereeId], references: [id])
  refereeId       String   @db.ObjectId
  earnings        Float    @default(0)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([referrerId, refereeId])
}



model Deposit {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @db.ObjectId
  depositWallet String?
  amount        Float
  txHash        String?
  network       String?
  currency      String?
  proofImage          String?
  verifiedAt    DateTime?
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
}



model AdminWallet {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  currency    String   // BTC, ETH, USDT, etc
  address     String
  network     String?  // Mainnet, TRC20, ERC20, etc
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
}


model Withdrawal {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @db.ObjectId
  walletAddress   String
  amount          Float
  cryptocurrency  String
  status          String   @default("pending")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}



model AdminSettings {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  depositWallet String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}



model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
}




model InvestmentPlan {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  minAmount   Float
  maxAmount   Float?
  profitRate  Float    // Daily profit rate in percentage
  duration    Int      // Duration in hours
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}



model Investment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  planId         String   @db.ObjectId
  name           String?
  amount         Float
  expectedProfit Float
  status         String   @default("active")
  startDate      DateTime @default(now())
  endDate        DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}